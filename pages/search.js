import Head from "next/head";
import styled, { keyframes } from "styled-components";
import { useState, useRef } from "react";

import Header from "../components/header";
import Footer from "../components/footer";
import Explanation from "../components/explanation";

import { Main } from "../components/layout/main";
import { Link } from "next/link";

export default function Home() {
  const [isOpen, setIsOpen] = useState(false);
  const [isSearched, setIsSearched] = useState(false);
  const inputRef = useRef();

  const handleSearchIconClick = () => {
    setIsSearched(isOpen);

    // When it's not open, we open it. When it's open, we search
    setIsOpen(!isOpen);

    // It is generally nice experience to focus in the field on click.
    // isOpen hasn't changed yet, so we kinda check the opposite.
    if (!isOpen) {
      inputRef.current.focus();
    }
  };

  return (
    <>
      <Head>
        <title>Animations</title>
        <meta name="description" content="Generated by Animations" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />

      <Main maxWidth={30}>
        <h1>Search animation</h1>
        <Search isOpen={isOpen}>
          <ul>
            <li style={{ "--delay": "200ms" }}>
              <a href="#">Hello world</a>
            </li>
            <li style={{ "--delay": "0ms" }}>
              <a href="#">Another menu item</a>
            </li>
          </ul>

          <div style={{ position: "relative" }}>
            <SearchInput ref={inputRef} isOpen={isOpen} />

            <SearchIcon type="button" onClick={handleSearchIconClick}>
              {isOpen ? (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  width="24"
                  height="24"
                >
                  <path fill="none" d="M0 0h24v24H0z" />
                  <path d="M16.172 11l-5.364-5.364 1.414-1.414L20 12l-7.778 7.778-1.414-1.414L16.172 13H4v-2z" />
                </svg>
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  width="24"
                  height="24"
                >
                  <path d="M18.031 16.617l4.283 4.282-1.415 1.415-4.282-4.283A8.96 8.96 0 0 1 11 20c-4.968 0-9-4.032-9-9s4.032-9 9-9 9 4.032 9 9a8.96 8.96 0 0 1-1.969 5.617zm-2.006-.742A6.977 6.977 0 0 0 18 11c0-3.868-3.133-7-7-7-3.868 0-7 3.132-7 7 0 3.867 3.132 7 7 7a6.977 6.977 0 0 0 4.875-1.975l.15-.15z" />
                </svg>
              )}
            </SearchIcon>
          </div>
        </Search>

        <Explanation>
          <p>
            The animation sequence is what matters here. We have 100-200ms delay
            between the animations of the different components, which creates a
            sequence that drives the user eye.
          </p>

          <p>
            Each animation is no longer than 300ms to keep the whole sequence
            short. The animation takes around 1 second to complete. Ideally, we
            want to keep it as short as possible especially for small elements
            like these. If we were to animate a larger component (like a hero
            banner), then we might have slower animation times because of the
            large movement.
          </p>

          <p>For improved UX, we are focusing in the input on click via JS.</p>
        </Explanation>
      </Main>

      <Footer />
    </>
  );
}

const hide = keyframes`
  from {
    opacity: 1;
    transform: translateX(0);
  }

  to {
    opacity: 0;
    transform: translateX(-.5em);
  }
`;

const show = keyframes`
  from {
    opacity: 0;
    transform: translateX(-.5em);
  }

  to {
    opacity: 1;
    transform: translateX(0);
  }
`;

const Search = styled.form`
  display: flex;
  align-items: center;
  gap: 1em;
  position: relative;

  ul {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
    gap: 1em;
  }

  li {
    animation-name: ${(props) => (props.isOpen ? hide : show)};
    animation-duration: 150ms;
    animation-fill-mode: both;
    animation-delay: var(--delay);
  }

  a:hover {
    text-decoration: underline;
    color: var(--color-primary);
  }
`;

const SearchInput = styled.input`
  position: absolute;
  height: 3em;
  border-radius: 0.5em;
  border: 2px solid var(--color-border);
  right: 3.5em;
  width: 18.5em;
  transition: 0.2s;
  padding: 0 1em;
  transition-delay: ${(props) => (props.isOpen ? ".4s" : ".1s")};
  transform: ${(props) => (props.isOpen ? "translateX(0)" : "translateX(1em)")};
  opacity: ${(props) => (props.isOpen ? "1" : "0")};
  pointer-events: ${(props) => (props.isOpen ? "auto" : "none")}; ;
`;

const SearchIcon = styled.button`
  width: 3em;
  height: 3em;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background: transparent;
  border-radius: 0.5em;
  border: 2px solid var(--color-border);
  transition: 0.3s;
  cursor: pointer;

  &:hover {
    transition: 0.1s;
    border-color: var(--color-primary);
  }

  &:active {
    transition: 0.05s;
    transform: scale(0.95);
  }
`;
